[{"snippet":"<html>\n    <head>\n        <title>Hello World</title>\n    </head>\n    <body>\n        Hello World\n    </body>\n</html>","title":"Hello World HTML","languages":["HTML"],"id":0,"description":"Just a basic skeleton HTML page.\n\n - Save as `index.html`\n - Open in a web broser"},{"snippet":"<?php\n\nnamespace IT;\n\nclass Car {\n    private $velocityX;\n    function __construct(){\n        $this->velocityX = 0;\n    }\n    function increaseSpeed($amount){\n        $this->velocityX += $amount;\n    }\n}","title":"Basic PHP Class","languages":["PHP"],"id":1,"description":"Basic class structure for a PHP class."},{"snippet":"#include <stdio.h>\n\nint main(){\n\tprintf(\"Hello World\\n\");\n\treturn 0;\n}","title":"Hello World C","languages":["C"],"id":2,"description":"Basic C syntax example:\n\n - Save as `helloworld.c`\n - Compile with `gcc helloworld.c`\n - Run `./a.out`"},{"snippet":"#include <iostream>\n\nusing namespace std;\n\nint main(){\n    cout << \"Hello World\" << endl;\n    return 0;\n}","title":"Hello World C++","languages":["C++"],"id":3,"description":"Basic Hello World C++ application:\n\n - Save as `HelloWorld.cpp`\n - Compile with `g++ HelloWorld.cpp`\n - Run with `./a.out`"},{"snippet":"print(\"Hello World\")","title":"Hello World Python","languages":["Python"],"id":4,"description":"Simple Python Hello World interpreted script:\n\n - Save as `hello_world.py`\n - Run with `python hello_world.py`"},{"snippet":"package;\n\npublic class HelloWorld {\n    public static void main(String args){\n      System.out.println(\"Hello World\");\n    }\n}\n","title":"Hello World Java","languages":["Java"],"id":5,"description":"To compile bytecode and run:\n\n - Save as `HelloWorld.java`\n - Compile with `javac HelloWorld.java`\n - Run with `java HelloWorld`"},{"snippet":"main = putStrLn \"Hello, World!\"","languages":["Haskell"],"title":"Hello World Haskell","id":6,"description":"I have no idea how this is supposed to work."},{"snippet":"// Function to download data to a file\nfunction download(data, filename, type) {\n    var a = document.createElement(\"a\"),\n        file = new Blob([data], {type: type});\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\n        window.navigator.msSaveOrOpenBlob(file, filename);\n    else { // Others\n        var url = URL.createObjectURL(file);\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        setTimeout(function() {\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);  \n        }, 0); \n    }\n}","title":"Download Data to File","languages":["JS"],"id":7,"description":"Saves some string to a file and downloads to the users download folder.\n\nMust be initiated from a user event."},{"snippet":"console.log('Hello World');\nalert('Hello World');","title":"Hello World Javascript","languages":["JS"],"id":8,"description":"Basic Hello World Javascript file\n\n - Save as HelloWorld.js\n - Create a `index.html` and load the HelloWorld.js file by typing `<script src=\"HelloWorld.js\"></script>`"},{"snippet":"class Test {\n    constructor(){\n        console.log('created a new object')\n    }\n}\n\nexport default Test;","title":"ES6 Class","languages":["JS"],"id":9,"description":"Basic ES6 Class definiton\n\nTest.js"},{"snippet":"import React, { Component } from \"react\";\nimport './MyCustomComponent.css'\n\nclass MyCustomComponent extends Component {\n    static defaultProps = {\n        someProp:'defaultValue'\n    };\n    \n    constructor(props){\n        super(props)\n        this.state = {\n        }\n        // Destructing props\n        //const {  } = this.props;\n    }\n    // optional lifecycle methods\n    \n    // shouldComponentUpdate(nextProps, nextState) // can compare against this.prop or this.state\n    // componentWillUpdate(nextProps, nextState) // can call non-mutating functions\n    // componentDidUpdate(prevProps, prevState) //Happens after rerender, access to DOM nodes\n    // componentWillUnmount() //cleanup handlers, timers, etc.\n    \n    \n    render(){\n        return (\n            <div>\n                My Custom Component Working!\n            </div>\n        )\n    }\n}\n\nexport default MyCustomComponent;","title":"React Component","languages":["JSX"],"description":"Basic JSX component","id":10},{"snippet":"import { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'my-custom-component',\n  templateUrl: './my-custom-component.component.html',\n  styleUrls: ['./my-custom-component.component.css']\n})\nexport class MyCustomComponent implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n}\n","title":"Angular Component","languages":["Typescript"],"description":"Basic Angular Component","id":11},{"snippet":"import { Component, OnInit } from '@angular/core';\n@Component({\n  selector: 'cbi-cmp',\n  template: require('./cmp.component.pug'),\n  styles: [require('./cmp.component.scss')]\n})\nexport class MyCustomComponent implements OnInit {\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n}\n","title":"CBI Component","languages":["Typescript"],"id":12},{"snippet":"import { DebugElement } from '@angular/core';\nimport { By } from '@angular/platform-browser';\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { ComponentUnderTest } from './';\n\ndescribe('ComponentUnderTest', () => {\n  let component: ComponentUnderTest;\n  let fixture: ComponentFixture<ComponentUnderTest>;\n  let testComponent: DebugElement;\n\n  beforeEach(\n    async(() => {\n      TestBed.configureTestingModule({\n        imports: [],\n        declarations: [ComponentUnderTest]\n      }).compileComponents();\n    })\n  );\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ComponentUnderTest);\n    component = fixture.componentInstance;\n    // Setup default props on component for all tests\n    fixture.detectChanges();\n\n    testComponent = fixture.debugElement;\n  });\n\n  describe('when situation', () => {\n    it('should doathing', () => {\n    });\n  });\n\n});\n","title":"CBI test spec","languages":["Typescript"],"description":"Basic scaffold for test components","id":13},{"snippet":"describe('when', () => {\n  it('should', () => {\n    \n  })\n});","title":"Test Block","languages":["Javascript"],"description":"","id":14},{"snippet":"<template>\n  <div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ComponentName',\n  /*\n  components: {\n  }\n  */\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n","title":"Vue Component","languages":["html"],"description":"Basic Vue Component\n\n - just a test\n\n# big test","id":15},{"snippet":"import { Action } from '@ngrx/store';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\n\nimport { ErrorWithHttpCode } from 'Models/error-with-http-code';\nimport { ListsApiService } from 'Api/lists.api';\nimport {\n  ListOfSitesActionTypes,\n  FetchListOfSitesAction,\n  FetchListOfSitesSuccessAction,\n  FetchListOfSitesFailureAction\n} from 'Actions/list-of-sites.action';\n\n@Injectable()\nexport class SampleEffects {\n  @Effect()\n  fetchListOfSites$: Observable<Action> = this.actions$.pipe(\n    ofType(ListOfSitesActionTypes.FETCH_LIST_OF_SITES_ACTION),\n    switchMap((action: FetchListOfSitesAction) => {\n      return this.listAPI.getListStores(action.payload).pipe(\n        map(data => {\n          // If necessary could map data to a new type before passing as\n          // success action payload\n          return new FetchListOfSitesSuccessAction(data);\n        }),\n        catchError(err => of(new FetchListOfSitesFailureAction(new ErrorWithHttpCode(err.message, err.status))))\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private listAPI: ListsApiService,\n    // If needed could inject store here to 'select' other observables to\n    // combine with the http observable response before dispatching success\n    // or fail action.\n    \n    // private store: Store<AppState>\n    \n    // Can also inject any helper services here for mapping from DTO to local\n    // objects and/or any other transformation needed before putting the data\n    // into the store.\n  ) {}\n}\n","title":"Angular 5 Effect RXJS","languages":["Typescript"],"id":16},{"snippet":"import { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n// This model/interface would typically be defined in a models folder and imported here\ninterface SampleData {\n  backendProp1: string;\n  backendProp2: number;\n}\n\n@Injectable()\nexport class SampleApiService {\n  constructor(private http: HttpClient) {}\n\n  public getSampleData(listId: string): Observable<SampleData> {\n    const url = `/base/url/goes/here/${listId}`;\n    return this.http.get<SampleData>(url);\n  }\n}\n","title":"Angular 5 Service API","languages":["Typescript"],"id":17},{"snippet":"import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { AppState } from 'Reducers/root.reducer';\n\n\n@Component({\n  selector: 'lists-container',\n  template: require('./lists-container.component.pug'),\n  styles: [require('./lists-container.component.scss')]\n})\nexport class ListsContainerComponent implements OnInit, OnDestroy {\n  // SampleState$: Observable<SampleState>;\n  // SampleLoading$: Observable<boolean>;\n  // SampleData$: Observable<Array<CBIList>>;\n  // SampleDisplayData$: Observable<Array<CBIList>>;\n\n  private ngUnsubscribe = new Subject();\n\n  ngOnInit() {\n    // Example below shows setup of props pointing to observables from the store and\n    // transformation of data specific to this container/set of views.\n\n    // this.SampleState$ = this.store.select(selectSampleState);\n    // this.SampleData$ = this.store.select(selectSample);\n    // this.SampleDisplayData$ = this.SampleData$.pipe(\n    //   filter(Sample => !!Sample),\n    //   combineLatest(this.sortSubject),\n    //   map(([list, sort]) => {\n    //     const sortedList = this.dataTableService.sortDataTableData(sort, list);\n    //     return sortedList;\n    //   }),\n    //   distinctUntilChanged()\n    // );\n\n\n    // Example below shows using ngUnsubscribe to subscribe to an observable and free\n    // up the subscription when the component is destroyed\n\n    // this.sortSubject.takeUntil(this.ngUnsubscribe).subscribe(sortColumn => {\n    //   this.dataTableService.fixSortDirection(sortColumn, this.columnDefs);\n    // });\n\n\n    this.store.dispatch(new FetchSampleDataAction());\n  }\n\n  constructor(\n    private store: Store<AppState>\n  ) {}\n\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","title":"Angular 5 Container Component","languages":["Typescript"],"id":18},{"snippet":"// Create Admin User that can create other users\nuse admin\ndb.createUser(\n  {\n    user: \"useradmin\",\n    pwd: \"thepianohasbeendrinking\",\n    roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]\n  }\n)\n\n// Select regular DB to use and then create user with auth on that DB\nuse test\ndb.createUser(\n  {\n    user: \"myTester\",\n    pwd: \"xyz123\",\n    roles: [ { role: \"readWrite\", db: \"test\" } ]\n  }\n)\n\n// Auth a user\nuse test\ndb.auth(\"myTester\", \"xyz123\")\n","title":"Mongo Start/Connect/Create User/Auth","languages":["javascript"],"description":"Start mongo service\n`brew services list`\n`brew services start mongodb`\n\nConnect mongo client:\n`mongo`\n// Run commands in code section to setup new user\n\nAfter creating an admin user and a DB access user enable authorization in mongo config (`/usr/local/etc/mongod.conf` on OS X) as shown below and restart\n\n```\nsecurity:\n    authorization: \"disabled\"\n```\n\n`brew services restart mongodb`","id":19}]